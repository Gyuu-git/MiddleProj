package withme.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;

import vo.AccountVO;
import vo.ChatVO;
import vo.VoteItemVO;
import vo.VoteUserVO;
import vo.VoteVO;
import withme.dao.IWithMeChatDao;
import withme.dao.WithMeDaoImpl;

public class WithMeChatServiceImpl implements IWithMeChatService {
	private IWithMeChatDao dao;
	private static IWithMeChatService service;
	private WithMeChatServiceImpl() {
		dao = WithMeDaoImpl.getInstance();
	}
	public static IWithMeChatService getInstance() {
		if(service == null) service = new WithMeChatServiceImpl();
		return service;
	}

	@Override
	public List<Integer> getWmCode(String pName) {
		return dao.getWmCode(pName);
	}

	@Override
	public List<ChatVO> getChatList(ChatVO chatVo) {
		return dao.getChatList(chatVo);
	}

//	@Override
//	public int insertChat(Map<String, String> param) {
//		return dao.insertChat(param);
//	}
	
	@Override
	public int insertChat(ChatVO chatVo) {
		return dao.insertChat(chatVo);
	}
	@Override
	public String getWmGrade(Map<String, String> param) {
		return dao.getWmGrade(param);
	}
	
	@Override
	public List<AccountVO> getAccList(String room) {
		List<AccountVO> accList = dao.getAccList(room);
		if(accList != null && accList.size() > 0) {
			for(AccountVO aVo : accList) {
				if(aVo.getAcc_date() != null)
					aVo.setAcc_date(aVo.getAcc_date().split(" ")[0]);
			}
		}
		return accList;
	}
	
	@Override
	public int insertAcc(AccountVO aVo) {
		return dao.insertAcc(aVo);
	}
	
	@Override
	public int deleteAcc(int no) {
		return dao.deleteAcc(no);
	}
	
	@Override
	public int updateAcc(AccountVO accVo) {
		return dao.updateAcc(accVo);
	}
	@Override
	public void insertVote(VoteVO vote, String parameter) {
		int vo_no = dao.insertVote(vote);
		
		String[] viArr = parameter.split("\\|\\|");
		for(int i = 0; i < viArr.length; i++) {
			System.out.println(viArr[i]);
			VoteItemVO vivo = new VoteItemVO();
			vivo.setVote_no(vo_no);
			vivo.setVi_content(viArr[i]);
			dao.insertVoteItem(vivo);
		}
	}
	
	@Override
	public String getAllVote(int room) {
		Gson gson = new Gson();
		
		
		Map<VoteVO, Map<VoteItemVO, List<VoteUserVO>>> map = new HashMap<VoteVO, Map<VoteItemVO,List<VoteUserVO>>>();
		
		List<VoteVO> voteList = dao.getVoteList(room);
		List<VoteItemVO> viList = new ArrayList<VoteItemVO>();
		Map<VoteItemVO, String> vuJson = new HashMap<VoteItemVO, String>();
		for(VoteVO vVo : voteList) {
			int vo_no = vVo.getVote_no();
			viList = dao.getVoteItem(vo_no);
			List<VoteUserVO> vuList = new ArrayList<VoteUserVO>();
			for(VoteItemVO viVo : viList) {
				int vi_no = viVo.getVi_no();
				vuList = dao.getVoteUser(vi_no);
			}
//			vuJson.put(vVo, gson.toJson(vuList));
//			map.put(vVo, value);
		}
		
		String jsonData = gson.toJson(map);
		System.out.println(jsonData);
		return gson.toJson(jsonData);
	}

}
;